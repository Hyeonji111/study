<Quest 02. CSS의 기초와 응용>

1.Introduction
▶ CSS는 Cascading StyleSheet의 약자입니다.
ⓐ Cascading : 스타일 우선 순위, 위에서 아래로 흐르는, 상속 또는 종속
: 스타일 우선순위(중요도, 적용범위, 소스 순서)
  중요도 ) - 사용자 스타일 시트 => 제작자가 만든 !import 스타일=> 제작자가 만든 일반 스타일 => 기존적인 브라우저 스타일  
             - 사용자가 저장한 스타일 => div{color: blue !import;} => div{color: blue;} => p{color: blue;} 
  적용범위) - 인라인 스타일 => id스타일 => class스타일 => 태그스타일
              - <p style="color:orange;"> => #abc{color:borwn;} => .def{color:yellow;} => p{color:purple;}
  소스순서) - p{color:black;} p{color:pink;} 순으로 쓸 시, p태그는 pink
+++ https://makinghome.tistory.com/67

: 스타일 상속
  - 스타일 적용 범위가 좁을수록 우선순위가 높음
+++ https://makinghome.tistory.com/70

▶ 웹브라우저에 표시되는 HTML 문서의 스타일을 지정하는 (거의) 유일하지만 다루기 쉽지 않은 언어입니다.
▶ 이번 퀘스트를 통해 CSS의 기초적인 레이아웃 작성법을 알아볼 예정입니다.

2. Topics
▶ CSS의 기초 문법과 적용 방법
ⓐ Inline, <style>, <link rel="stylesheet" href="...">
   - display의 inline) - width height 상하 무시, margin padding 좌우 간격만 반영됨.  한줄로 보임\
                        - <a>, <i>, <span>, <abbr>, <img>, <strong>, <b>, <input>, <sub>, <br>, <code>, <em>, <small>, 
                          <tt>, <map>, <textarea>, <label>, <sup>, <q>, <button>, <cite>
   - block) - width, height padding margin 반영됨
            - <address>, <article>, <aside>, <blockgquote>, <canvas>, <dd>, <div>, <dl>, <hr>, <header>, <form>,<h1>, 
              <h2>, <h3>, <h4>, <h5>, <h6>, <table>, <pre>, <ul>, <p>, <ol>, <video>
   - inline-block) - inline처럼 한줄 배치되며, width, height padding margin 반영됨
                    - <button>, <input>, <select>
    <link>) - 사용자에게 노출되지 않는 외부소스 연결 태그, <link rel="stylesheet" type="text/css" href="style.css"> 
             - rel : 현재문서와 연결문서의 관계표시(stylesheet 스타일시트 연결, alternate:문서의 대안버전으로 연결, author: 저작자로 연결, help:도움말, license: 문서 저작권 정보로, search: 검색도구로)
             - type: web content type(css:text/css, js:text/javascript, xml:application/xml 등)
             - href: 연결 주소(상대주소, 절대주소 모두 가능)
+++ http://www.tcpschool.com/html-tags/link
+++ https://m.blog.naver.com/on21life/222055586081

▶ CSS 규칙의 우선순위
- introduce 확인
▶ 박스 모델과 레이아웃 요소
ⓐ 박스 모델: width, height, margin, padding, border, box-sizing
-> 안 => 밖 :: content(width,height) => padding => border => margin
ⓑ position, left, top, display
- position : static(top, right, bottom, left, z-index(부모가 가지고 있는 z-index값이라는 기본 속성이 낮으면, 자식의 z-index값이 높아도 부모의 쌓임 순서를 따름) 속성값에 영향을 받지 않음) 
               relative(원래 위치를 기준으로top, bottom, left, right 속성 반영) 
	   fixed(뷰포트 기준으로 배치 고정된 위치에 top, left, bottom, right로 배치 가능)
	   absolute(상위 혹은 부모 요소를 기준이됨)
               sticky: 부분 스크롤 가능해짐. 부모요서에 overflow, 자식요소에 sticky
- display : none : hidden과 다르게 영역도 차지 않고 보이지 않음
             block : 한줄 모두 차지. 가로 영역 모두 채우며 block 다음 등장태그는 줄바꿈 되어보임. width, height 적용됨
             inline : 콘텐츠 크기만큼 차지. width, height 적용 안됨. 글자나 문장에 효과를 주기 위한 존재 단위. 줄바꿈 안되고 바로 오른쪽에 표시됨.
             inline-block : 줄바꿈 되지 않고 width와, height 적용 가능(단, Internet Explorer 7 이하 적용 안됨)
- right: auto 오른쪽 맨끝. left도 같음, margin : top, right, bottom, left(margin: 10px일 경우 4면 모두에 해당 margint : 10px 5px이면 세로방향10px이고 가로방향 5px)
+++ https://developer.mozilla.org/ko/docs/Web/CSS/margin
ⓒ CSS Flexbox와 Grid
- Flexbox : 정렬, container 속성 안에 item 속성 태그 존재
              - container : display:flex / flexdirection:row-reverse(수평) or column-reverse(수직)
                              flex-grow : 1;(item이 1/n 크기로 나눠줌)
              - item : flex_basis : 200px(기본크기 조정) flex-grow:2; 적용됨 <=> flex-shrink 줄이면 여백 없어서 화면을 줄여도 줄지 않음. basis값이 있어야함     +nth-child(순서)
              - Holy-grail-rayout
+++ https://www.youtube.com/watch?v=pgFyqS4oCIc&list=PLuHgQVnccGMDaVaBmkX0qfB45R_bYrV62&index=36

- Grid
▶ CSS 표준의 역사
▶ 브라우저별 Developer tools

3. Resources
▶ MDN - CSS(https://developer.mozilla.org/ko/docs/Web/CSS)
▶ Centering in CSS: A Complete Guide
▶ A complete guide to Flexbox(https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
▶ 그리드 레이아웃과 다른 레이아웃 방법과의 관계(https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_grid_layout)

4. Checklist
▶ CSS를 HTML에 적용하는 세 가지 방법은 무엇일까요?
ⓐ 세 가지 방법 각각의 장단점은 무엇일까요?
▶ CSS 규칙의 우선순위는 어떻게 결정될까요?
▶ CSS의 박스모델은 무엇일까요? 박스가 화면에서 차지하는 크기는 어떻게 결정될까요?
▶ float 속성은 왜 좋지 않을까요?
▶ Flexbox(Flexible box)와 CSS Grid의 차이와 장단점은 무엇일까요?
▶ CSS의 비슷한 요소들을 어떤 식으로 정리할 수 있을까요?

5. Quest
▶ Quest 01에서 만들었던 HTML을 바탕으로, 이 그림의 레이아웃과 CSS를 최대한 비슷하게 흉내내 보세요. 꼭 완벽히 정확할 필요는 없으나 align 등의 속성은 일치해야 합니다.
▶ 주의사항: 되도록이면 원래 페이지의 CSS를 참고하지 말고 아무것도 없는 백지에서 시작해 보도록 노력해 보세요!

6. Advanced
▶ 왜 CSS는 어려울까요?
▶ CSS의 어려움을 극복하기 위해 어떤 방법들이 제시되고 나왔을까요?
▶ CSS가 브라우저에 의해 해석되고 적용되기까지 내부적으로 어떤 과정을 거칠까요?
▶ 웹 폰트의 경우에는 브라우저 엔진 별로 어떤 과정을 통해 렌더링 될까요?