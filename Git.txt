about git

<Git>

* 사용자 정보
ⓐ name
git config --global user.name
ⓑ email
git config --global user.email
ⓒ 파일 경로
pwd

* 지정한 폴더명 사용
git clone 깃주소 폴더명 => pwd => cd study

* init 
: 현재 디레토리에다가 내가 작업을 진행하겠다.
ⓐ 폴더 지정
pwd (폴더경로 확인 후) 
=> (원하는 폴더 지정) 
=> pwd(로 다시 파일 경로 확인) 
=> mkdir 폴더이름(해당위치에 폴더를 생성하는 기능)
=> ls -al(결과 확인)
ⓑ 명령문 확인
git => start a working area (확인)
ⓒ 깨끗한 화면
clear
ⓓ init
git init(깃의 저장소 초기화 했다는 문구 나옴) => (결과 확인)ls -al
=> (.git 나오는 거 확인, 여기에 생성된 정보가 저장되는 것)

* add
: commit 대기 상태
ⓐ vim f1.txt 
: f1.txtv 파일을  편집하겠다. 
=> i(입력) => 아무거나 적기 => Esc 클릭(적을 수 없게됨) 
=> :w (저장) // :wq(저장 후 나가기)
ⓑ cat f1.txt
: 파일에 저장된 내용 확인
=> git status(버전 관리를 위함) => git add f1.txt(git이 추적하게 만들기) 
=> git staus(해당 파일 관여 여부 확인)

* version(= commit)
: 커밋 메세지라고도 함. 파일들이 왜 변경 되었는지 메세지 적는 것
: git 의미있는 변화(단위, 작업이 완결된 상태를 이르는 말)
ⓐ git commit
git commit => 1(입력, 버전 1이라는 의미) => Esc 
=> :wq(저장 후 나가기) => git log(버전 확인)
ⓑ 혹시다 git commit 했는데 vim 안 나올때
git commit 오류 => git config --global core.editor 'vim'
ⓒ vim에서 version 설정
git commit => vim(나오면) => 1(version 적기) => Esc 
=> :wq(저장 후 나가기) => git log(버전 확인)
ⓓ 다시 version 만들기
ls -al => vim f1.txt => i(적기) =>source : 2 => Esc => :wq
=> git status(상태 확인 modified 파일 확인할 수 있음) => git add f1.txt
=> git commit => 2 => Esc => :wq
ⓔ git commit -a
: 수정하거나 삭제한 파일 자동으로 add
vimf1.txt => 버전 수정 10 => git commit -a 
=> (메모하는 곳으로 이동됨) 10 => Esc => :wq
ⓕ git commit -am
: 위 방법도 불편할때(따로 커밋 메세지를 열지 않아도 된다.)
vim f1.txt => 버전 수정 5 => git commit -am "5" 

* git stage area
: commit 대기 상태이고 이후 commit이 된다면 repository(저장소)라고 한다.
ⓐ version 복습
cp f1.txt f2.txt(f1복사gotj f2 만들기) => ls -al => git status
=> git add f2.txt(버전 관리) => git commit => 3 => Esc => :wq
=> git log(역사 확인) => q(나가기) 
ⓑ 버전 수정
vim f1.txt => i => f1.txt : 1 => Esc => :wq(f2.txt도 바꾸기)
=> (내용 확인) cat f1.txt
ⓒ 왜 add를 해야 하는가?
: 선택적 커밋을 위함
git status(수정파일 확인) => git add f1.txt(선택적 파일 commit)
=> git commit => 4 => esc 후 :wq

* log & diff
: 변경 사항 확인하기
ⓐ git log -p
git log -p(각각의 커밋과 커밋 사이에 소스상의 차이점 확인 가능) 
=> 최근 commit과 이전 commit을 비교할 수 있게 된다.
=> ++가 최근 상태이고 --이전 상태이다.
ⓑ 고유 주소 이전으로 git log 확인하기 
git log 상태에서 원하는 부분의 아이디(""된 부분)를 복사 
commit "c239355d6cfa74b34f1b9383574f24e985586cae"
Author: hyeonji yu <vkqpfsk@gmail.com>
Date:   Mon Jan 17 19:30:19 2022 +0900
    4
=> Esc => 붙여넣기 하면 볼 수 있음
ⓒ diff
: 특정 아이디의 소스상의 차이를 비교하고 싶을때 사용
- git diff 7c68e121297b413ca6c79d00e4ee594fd04d5719..e2f59a76365c235c1368077f6b5f7634c715bd21
- vim f1.txt(에서 소스를 바꾼 후 바로) => git diff(하면 방금 바꾼 부분을 확인 할 수 있다.)

* reset
: commit을 취소하는 것이고 주의해야함!! 복구 가능.
ⓐ reset
git log(에서 돌아가고 싶은 부분의 아이디 복사) => q(나가기)
=> git reset 81c047732266ef5ce79a0319388d9edebc914fb4 --hard
=> git log(로 확인)
ⓑ revert
: reset하면서 새로운 버전을 생성하는 것

* git 원격 저장소
: 지역저장소(개인 컴퓨터)가 아닌 인터넷을 매개로 하여 저장하는 공간
- 소스 코드를 백업, 다른 사람과 협업
ⓐ 원격 저장소 생성
git remote add origin https://github.com/Hyeonji111/study.git
(remote 로컬 저장소에서 원격 저장소로
add 레파지토리를 연결하는데, 주소가 기니 
origin이라는 별명으로 하겠다.)
=> git remote => (origin이라고 뜨면 원격 저장소가 만들어졌단 의미)
=> git remote -v(상세보기됨)
ⓑ 삭제
git remote remove origin
ⓒ push 연결



git branch 로컬 저장소의 Branch 목록 보기
git branch -r 원격 저장소의 Branch 목록 보기
git branch -a 모든 Branch 목록 보기
git branch {생성할 Branch 이름} 현재 위치에서 새로운 Branch 생성하기
git checkout {이동할 Branch 이름} 다른 Branch로 이동하기
git branch -m {기존 Branch 이름} {새로운 Branch 이름} Branch 이름 변경하기
git branch -d {삭제할 Branch 이름} Branch 삭제 하기
git push --delete {원격 저장소 별칭} {원격 Branch 이름} 원격 저장소의 Branch 삭제하기
: 특이하지만, 원격 저장소의 Branch를 삭제하는 명령은 다름 아닌 push 명령입니다.
- 예) git push --delete origin test

$ mkdir [폴더명] 
$ touch [파일명] 
$ vi [파일명]
:wq














































































+ 인프런 - es6,  생활코딩
